// Autogenerated from Pigeon (v16.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum PlayerState: Int {
  case ready = 0
  case buffering = 1
  case idle = 2
  case playing = 3
  case ended = 4
  case error = 5
}

/// Generated class from Pigeon that represents data sent in messages.
struct CreateResponse {
  var id: String

  static func fromList(_ list: [Any?]) -> CreateResponse? {
    let id = list[0] as! String

    return CreateResponse(
      id: id
    )
  }
  func toList() -> [Any?] {
    return [
      id
    ]
  }
}
private class IvsPlayerRequesterToNativeCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return CreateResponse.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class IvsPlayerRequesterToNativeCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? CreateResponse {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class IvsPlayerRequesterToNativeCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return IvsPlayerRequesterToNativeCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return IvsPlayerRequesterToNativeCodecWriter(data: data)
  }
}

class IvsPlayerRequesterToNativeCodec: FlutterStandardMessageCodec {
  static let shared = IvsPlayerRequesterToNativeCodec(readerWriter: IvsPlayerRequesterToNativeCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol IvsPlayerRequesterToNative {
  func create() throws -> CreateResponse
  func load(id: String, urlString: String) throws
  func removeExcept(id: String) throws
  func resetAll() throws
  func play(id: String) throws
  func pause(id: String) throws
  func clean(id: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class IvsPlayerRequesterToNativeSetup {
  /// The codec used by IvsPlayerRequesterToNative.
  static var codec: FlutterStandardMessageCodec { IvsPlayerRequesterToNativeCodec.shared }
  /// Sets up an instance of `IvsPlayerRequesterToNative` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: IvsPlayerRequesterToNative?) {
    let createChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ivs_player_plugin.IvsPlayerRequesterToNative.create", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createChannel.setMessageHandler { _, reply in
        do {
          let result = try api.create()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      createChannel.setMessageHandler(nil)
    }
    let loadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ivs_player_plugin.IvsPlayerRequesterToNative.load", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let urlStringArg = args[1] as! String
        do {
          try api.load(id: idArg, urlString: urlStringArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      loadChannel.setMessageHandler(nil)
    }
    let removeExceptChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ivs_player_plugin.IvsPlayerRequesterToNative.removeExcept", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeExceptChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          try api.removeExcept(id: idArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeExceptChannel.setMessageHandler(nil)
    }
    let resetAllChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ivs_player_plugin.IvsPlayerRequesterToNative.resetAll", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      resetAllChannel.setMessageHandler { _, reply in
        do {
          try api.resetAll()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      resetAllChannel.setMessageHandler(nil)
    }
    let playChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ivs_player_plugin.IvsPlayerRequesterToNative.play", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      playChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          try api.play(id: idArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      playChannel.setMessageHandler(nil)
    }
    let pauseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ivs_player_plugin.IvsPlayerRequesterToNative.pause", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pauseChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          try api.pause(id: idArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pauseChannel.setMessageHandler(nil)
    }
    let cleanChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ivs_player_plugin.IvsPlayerRequesterToNative.clean", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      cleanChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          try api.clean(id: idArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      cleanChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol IvsPlayerRequesterToFlutterProtocol {
  func didChangeState(id idArg: String, state stateArg: PlayerState, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func didChangeDuration(id idArg: String, duration durationArg: Double, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class IvsPlayerRequesterToFlutter: IvsPlayerRequesterToFlutterProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }
  func didChangeState(id idArg: String, state stateArg: PlayerState, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.ivs_player_plugin.IvsPlayerRequesterToFlutter.didChangeState"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([idArg, stateArg.rawValue] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func didChangeDuration(id idArg: String, duration durationArg: Double, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.ivs_player_plugin.IvsPlayerRequesterToFlutter.didChangeDuration"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([idArg, durationArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
